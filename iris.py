# -*- coding: utf-8 -*-
"""Iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NWR3hqROHOPpYYgfX-kv8hjfJuu-zluL
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/Iris.csv")

df.head()

df.describe()

df.info()

df['Species'].value_counts()

df.isnull().sum()

plt.hist(df['SepalLengthCm'])

plt.hist(df['SepalWidthCm'])

df['Species'].unique()

sns.countplot(df['Species'])

n = len(df[df['Species'] == 'Iris-versicolor'])
print("No of Iris-versicolor in Dataset:",n)

n = len(df[df['Species'] == 'Iris-setosa'])
print("No of Iris-setosa in Dataset:",n)

n = len(df[df['Species'] == 'Iris-virginica'])
print("No of Iris-virginica in Dataset:",n)

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
l = ['Iris-Versicolor', 'Iris-Setosa', 'Iris-Virginica']
s = [50,50,50]
ax.pie(s, labels = l,autopct='%1.2f%%')
plt.show()

import matplotlib.pyplot as plt
plt.figure(1)
plt.boxplot([df['SepalLengthCm']])
plt.figure(2)
plt.boxplot([df['SepalWidthCm']])
plt.show()

df.hist()
plt.show()

sns.pairplot(df,hue='Species')

df.corr()

sns.heatmap(df.corr(),annot=True)

X = df['SepalLengthCm'].values.reshape(-1,1)
print(X)

Y = df['SepalWidthCm'].values.reshape(-1,1)
print(Y)

plt.xlabel("SepalLengthCm")
plt.ylabel("SepalWidthCm")
plt.scatter(X,Y,color='b')
plt.show()

from sklearn.linear_model import LogisticRegression 
from sklearn.model_selection import train_test_split
from sklearn import metrics

train, test = train_test_split(df, test_size = 0.25)
print(train.shape)
print(test.shape)

train_X = train[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm',
                 'PetalWidthCm']]
train_y = train.Species

test_X = test[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm',
                 'PetalWidthCm']]
test_y = test.Species

train_X.head()

test_y.head()

test_y.head()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

scaler.fit(train_X)

standardized_data = scaler.transform(train_X)

print(standardized_data)

model = LogisticRegression()
model.fit(train_X, train_y)
prediction = model.predict(test_X)
print('Accuracy:',metrics.accuracy_score(prediction,test_y))